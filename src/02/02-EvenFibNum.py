'''
Even Fibonacci numbers

Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

link: https://projecteuler.net/problem=2
'''
def main():
    result = 0
    for num in getFibonacciList(4000000):
        if num % 2 == 0:
            result += num
    
    print(result)

def getFibonacciList(limit):
    # Avoid negative numbers
    if limit < 0:
        print(f"\nError: <limit> on 'getFibonacciList' function must be positive, passed: {limit}\n")
        exit(1)

    result = []
    
    # Handles limit 1 or 2
    if limit < 3:
        for i in range(1, limit):
            result.append(i)
        return result

    '''State variables'''
    # Updates variable
    result = [1, 2]

    # Sets next Index and init nextValue (1 + 2)
    sequenceSize = 2
    nextValue = 3

    while nextValue < limit:
        # Ensures 'while' check by updating the nextValue and skiping it to the next iteration
        if nextValue == 2:
            nextValue = result[sequenceSize - 1] + result[sequenceSize - 2]
            continue

        # Update the 'result' list
        result.append(nextValue)

        # Increase sequence size
        sequenceSize += 1

        #  Update 'nextValue' for the next iteration check
        nextValue = result[sequenceSize - 1] + result[sequenceSize - 2]

    return result

if __name__ == "__main__":
    main()